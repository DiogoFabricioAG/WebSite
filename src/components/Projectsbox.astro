---
interface TechIcon {
  src: string;
  alt?: string;
}

interface Props {
  title: string;
  description: string;
  finishDate: string;
  /** Icono único (legacy). Si se provee y no hay techs, se usará como único item */
  icon?: string;
  /** Lista de tecnologías (paths absolutos o relativos o con objeto {src, alt}) */
  techs?: Array<string | TechIcon>;
  /** URLs opcionales para ampliar funcionalidad */
  liveUrl?: string;
  repoUrl?: string;
  imagesUrl?: string;
}

const {
  title,
  description,
  finishDate,
  icon,
  techs = [],
  liveUrl,
  repoUrl,
  imagesUrl,
} = Astro.props as Props;

// Normalizamos: si no se pasa techs pero sí icon -> usarlo como único
const resolvedTechs: TechIcon[] = (techs.length ? techs : icon ? [icon] : []).map(
  (t) => (typeof t === "string" ? { src: t, alt: `${title} icon` } : { src: t.src, alt: t.alt ?? `${title} icon` })
);
---

<div class="flex flex-col">
  <div class="bg-white border-2 px-2 border-white w-1/5 text-xs text-black">{finishDate}</div>

  <div class="border border-white font-medium px-3 py-2">
    <h3 class="text-2xl font-bold">{title}</h3>

    <p class="text-xs font-light">{description}</p>
    {resolvedTechs.length > 0 && (
      <>
        <div class="flex flex-wrap justify-start my-2 gap-3">
          {resolvedTechs.map((t) => (
            <img src={t.src} alt={t.alt} class="h-6 w-6" />
          ))}
        </div>
      </>
    )}
  </div>

  <div class="px-1.5 py-1.5 bg-white w-full flex flex-wrap justify-end gap-2 text-[10px]">
    <div class="relative inline-block group">
      <button class="button-clean-dark">Ver Detalles</button>
      <span class="shadow-box-dark"></span>
    </div>
  </div>
</div>
